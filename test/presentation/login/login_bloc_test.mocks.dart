// Mocks generated by Mockito 5.0.15 from annotations
// in ioasys_app/test/presentation/login/login_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;

import 'package:ioasys_app/domain/model/user/email_status.dart' as _i5;
import 'package:ioasys_app/domain/model/user/password_status.dart' as _i7;
import 'package:ioasys_app/domain/model/user/user_tokens.dart' as _i3;
import 'package:ioasys_app/domain/repository/user/user_repository.dart' as _i2;
import 'package:ioasys_app/domain/use_case/do_login_use_case.dart' as _i8;
import 'package:ioasys_app/domain/use_case/validate_email_use_case.dart' as _i4;
import 'package:ioasys_app/domain/use_case/validate_password_use_case.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeRegExp_0 extends _i1.Fake implements RegExp {}

class _FakeUserRepository_1 extends _i1.Fake implements _i2.UserRepository {}

class _FakeUserTokens_2 extends _i1.Fake implements _i3.UserTokens {}

/// A class which mocks [ValidateEmailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockValidateEmailUseCase extends _i1.Mock
    implements _i4.ValidateEmailUseCase {
  MockValidateEmailUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  RegExp get regex => (super.noSuchMethod(Invocation.getter(#regex),
      returnValue: _FakeRegExp_0()) as RegExp);
  @override
  _i5.EmailStatus validateEmail(String? email) =>
      (super.noSuchMethod(Invocation.method(#validateEmail, [email]),
          returnValue: _i5.EmailStatus.valid) as _i5.EmailStatus);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ValidatePasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockValidatePasswordUseCase extends _i1.Mock
    implements _i6.ValidatePasswordUseCase {
  MockValidatePasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get minimumPasswordLength =>
      (super.noSuchMethod(Invocation.getter(#minimumPasswordLength),
          returnValue: 0) as int);
  @override
  _i7.PasswordStatus validatePassword(String? password) =>
      (super.noSuchMethod(Invocation.method(#validatePassword, [password]),
          returnValue: _i7.PasswordStatus.valid) as _i7.PasswordStatus);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DoLoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDoLoginUseCase extends _i1.Mock implements _i8.DoLoginUseCase {
  MockDoLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get userRepository =>
      (super.noSuchMethod(Invocation.getter(#userRepository),
          returnValue: _FakeUserRepository_1()) as _i2.UserRepository);
  @override
  _i9.Future<_i3.UserTokens> getRawFuture({_i8.DoLoginUseCaseParams? params}) =>
      (super.noSuchMethod(
              Invocation.method(#getRawFuture, [], {#params: params}),
              returnValue: Future<_i3.UserTokens>.value(_FakeUserTokens_2()))
          as _i9.Future<_i3.UserTokens>);
  @override
  _i9.Future<_i3.UserTokens> getFuture({_i8.DoLoginUseCaseParams? params}) =>
      (super.noSuchMethod(Invocation.method(#getFuture, [], {#params: params}),
              returnValue: Future<_i3.UserTokens>.value(_FakeUserTokens_2()))
          as _i9.Future<_i3.UserTokens>);
  @override
  String toString() => super.toString();
}
