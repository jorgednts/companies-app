// Mocks generated by Mockito 5.0.15 from annotations
// in ioasys_app/test/presentation/login/login_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:ioasys_app/domain/model/user/email_status.dart' as _i7;
import 'package:ioasys_app/domain/model/user/password_status.dart' as _i8;
import 'package:ioasys_app/domain/model/user/user_model.dart' as _i10;
import 'package:ioasys_app/domain/use_case/do_login_use_case.dart' as _i4;
import 'package:ioasys_app/domain/use_case/validate_email_use_case.dart' as _i2;
import 'package:ioasys_app/domain/use_case/validate_password_use_case.dart'
    as _i3;
import 'package:ioasys_app/presentation/login/login_bloc.dart' as _i5;
import 'package:ioasys_app/presentation/login/login_view_state.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeValidateEmailUseCase_0 extends _i1.Fake
    implements _i2.ValidateEmailUseCase {}

class _FakeValidatePasswordUseCase_1 extends _i1.Fake
    implements _i3.ValidatePasswordUseCase {}

class _FakeDoLoginUseCase_2 extends _i1.Fake implements _i4.DoLoginUseCase {}

/// A class which mocks [LoginBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginBloc extends _i1.Mock implements _i5.LoginBloc {
  MockLoginBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValidateEmailUseCase get validateEmailUseCase => (super.noSuchMethod(
      Invocation.getter(#validateEmailUseCase),
      returnValue: _FakeValidateEmailUseCase_0()) as _i2.ValidateEmailUseCase);
  @override
  _i3.ValidatePasswordUseCase get validatePasswordUseCase =>
      (super.noSuchMethod(Invocation.getter(#validatePasswordUseCase),
              returnValue: _FakeValidatePasswordUseCase_1())
          as _i3.ValidatePasswordUseCase);
  @override
  _i4.DoLoginUseCase get doLoginUseCase =>
      (super.noSuchMethod(Invocation.getter(#doLoginUseCase),
          returnValue: _FakeDoLoginUseCase_2()) as _i4.DoLoginUseCase);
  @override
  _i6.Stream<_i7.EmailStatus> get isValidEmail =>
      (super.noSuchMethod(Invocation.getter(#isValidEmail),
              returnValue: Stream<_i7.EmailStatus>.empty())
          as _i6.Stream<_i7.EmailStatus>);
  @override
  _i6.Stream<_i8.PasswordStatus> get isValidPassword =>
      (super.noSuchMethod(Invocation.getter(#isValidPassword),
              returnValue: Stream<_i8.PasswordStatus>.empty())
          as _i6.Stream<_i8.PasswordStatus>);
  @override
  _i6.Stream<bool> get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading),
          returnValue: Stream<bool>.empty()) as _i6.Stream<bool>);
  @override
  _i6.Stream<_i9.LoginViewState> get loginViewState =>
      (super.noSuchMethod(Invocation.getter(#loginViewState),
              returnValue: Stream<_i9.LoginViewState>.empty())
          as _i6.Stream<_i9.LoginViewState>);
  @override
  _i6.Future<void> doLogin(_i10.UserModel? userModel) =>
      (super.noSuchMethod(Invocation.method(#doLogin, [userModel]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i7.EmailStatus validateEmail(String? email) =>
      (super.noSuchMethod(Invocation.method(#validateEmail, [email]),
          returnValue: _i7.EmailStatus.valid) as _i7.EmailStatus);
  @override
  _i8.PasswordStatus validatePassword(String? password) =>
      (super.noSuchMethod(Invocation.method(#validatePassword, [password]),
          returnValue: _i8.PasswordStatus.valid) as _i8.PasswordStatus);
  @override
  String toString() => super.toString();
}
